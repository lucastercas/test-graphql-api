type Card {
  id: ID!
  number: String!
  agency: String!
  account: String
  owner: User!
}

"""
User Description
"""
interface User {
  """
  Description for field
  Supports multi-line description
  """
  id: ID!
  name: String!
  complete_name: String!
  cpf: String!
  active: Boolean!
  age: Int!
  email: String!
}

type Client implements User {
  id: ID!
  name: String!
  complete_name: String!
  cpf: String!
  active: Boolean!
  email: String!
  age: Int!
  cards: [Card]
}

type Admin implements User {
  id: ID!
  name: String!
  complete_name: String!
  cpf: String!
  active: Boolean!
  email: String!
  age: Int!
  department: String!
}

type Query {
  users: [User]
  cards: [Card]
  clients: [Client]
  admins: [Admin]

  # userById(id: ID!): User
  userByEmail(email: String): User
  cardById(id: ID!): Card
}

input ClientInput {
  name: String!
  complete_name: String!
  cpf: String!
  age: Int!
  email: String!
}

input AdminInput {
  name: String!
  complete_name: String!
  cpf: String!
  age: Int!
  accessNumber: String!
}

type Mutation {
  addClient(client: ClientInput): Client
  addAdmin(admin: AdminInput): Admin
}

type Subscription {
  userAdded: User
}
